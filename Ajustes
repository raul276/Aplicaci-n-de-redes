const express = require('express');
const app = express();
const mysql = require('mysql');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(passport.initialize());

const db = mysql.createConnection({
  host: 'tu_host',
  user: 'tu_usuario',
  password: 'tu_contraseña',
  database: 'tu_base_de_datos'
});

passport.use(new LocalStrategy({
  usernameField: 'correo',
  passwordField: 'contraseña',
  passReqToCallback: true
}, (req, correo, contraseña, done) => {
  db.query('SELECT * FROM usuarios WHERE correo = ?', correo, (err, results) => {
    if (err) {
      return done(err);
    }
    if (!results.length) {
      return done(null, false, { message: 'Correo electrónico o contraseña incorrectos' });
    }
    const usuario = results[0];
    bcrypt.compare(contraseña, usuario.contraseña, (err, isMatch) => {
      if (err) {
        return done(err);
      }
      if (!isMatch) {
        return done(null, false, { message: 'Correo electrónico o contraseña incorrectos' });
      }
      return done(null, usuario);
    });
  });
}));

app.post('/registro', (req, res) => {
  const { nombre, correo, contraseña } = req.body;
  db.query('SELECT correo FROM usuarios WHERE correo = ?', correo, (err, results) => {
    if (err) {
      console.log(err);
      res.status(500).send({ message: 'Error del servidor' });
    } else if (results.length > 0) {
      res.status(400).send({ message: 'Correo electrónico ya registrado' });
    } else {
      bcrypt.hash(contraseña, 10, (err, hash) => {
        if (err) {
          console.log(err);
          res.status(500).send({ message: 'Error del servidor' });
        } else {
          db.query('INSERT INTO usuarios SET ?', { nombre, correo, contraseña: hash }, (err, results) => {
            if (err) {
              console.log(err);
              res.status(500).send({ message: 'Error del servidor' });
            } else {
              res.send({ message: 'Usuario registrado correctamente' });
            }
          });
        }
      });
    }
  });
});

app.post('/iniciar-sesion', (req, res, next) => {
  passport.authenticate('local', (err, user, info) => {
    if (err) {
      return next(err);
    }
    if (!user) {
      return res.status(401).send({ message: 'Correo electrónico o contraseña incorrectos' });
    }
    req.logIn(user, (err) => {
      if (err) {
        return next(err);
      }
      const token = jwt.sign({ userId: user.id }, process.env.SECRET_KEY, { expiresIn: '1h' });
      res.send({ token });
    });
  })(req, res, next);
});

app.post('/cerrar-sesion', (req, res) => {
  req.logout();
  res.send({ message: 'Sesión cerrada correctamente' });
});

app.listen(3000, () => {
  console.log('Servidor escuchando en puerto 3000');
});
